from cm.htmllib import base
from cm.html.incident.incidentlib import IncidentList, IncidentDetails, \
IncidentCreateForm, IncidentModifyForm, IncidentDeleteForm, IncidentDetachForm, \
IncidentAttachToForm
from cm import error


def _q_index [html] (request):
    browse(request)

def browse [html] (request):
    base.header(request, title=_('Browse Incidents'))
    IncidentList(request)
    base.footer(request)

def create [html] (request):
    base.header(request, title=_('Add An Incident'))
    IncidentCreateForm().handle(request)
    base.footer(request)

def _q_lookup(request, name):
    return IncidentUI(name)

def attach_to [html] (request):
    base.header(request, title=_('Attach An Incident'))
    IncidentAttachToForm().handle(request)
    base.footer(request)



class IncidentUI:
    from cm.html.incident import item
    _q_exports = ['details', 'modify', 'delete', 'item', 'detach']

    def __init__(self, name):
        try:
            self.incident_id = int(name)
        except ValueError:
            raise error.TraversalError

    def _q_index [html] (self, request):
        self.details(request)

    def details [html] (self, request):
        base.header(request, title=_('Incident Details'))
        IncidentDetails(request, self.incident_id)
        base.footer(request)

    def modify [html] (self, request):
        base.header(request, title=_('Modify An Incident'))
        IncidentModifyForm(self.incident_id).handle(request)
        base.footer(request)

    def delete [html] (self, request):
        base.header(request, title=_('Delete An Incident'))
        IncidentDeleteForm(self.incident_id).handle(request)
        base.footer(request)

    def detach [html] (self, request):
        base.header(request, title=_('Detach An Incident'))
        IncidentDetachForm(self.incident_id).handle(request)
        base.footer(request)

